
var documents = [{
    "id": 0,
    "url": "https://stanlee321.github.io/404.html",
    "title": "",
    "body": " 404 Page not found :(  The requested page could not be found. "
    }, {
    "id": 1,
    "url": "https://stanlee321.github.io/about/",
    "title": "About Me",
    "body": "This is where you put the contents of your About page. Like all your pages, it‚Äôs in Markdown format. This website is powered by fastpages 1.       a blogging platform that natively supports Jupyter notebooks in addition to other formats. ¬†&#8617;    "
    }, {
    "id": 2,
    "url": "https://stanlee321.github.io/categories/",
    "title": "Tags",
    "body": "Contents: {% if site. categories. size &gt; 0 %} {% for category in site. categories %} {% capture category_name %}{{ category | first }}{% endcapture %} {{ category_name }}{% endfor %}{% endif %} {% for category in site. categories %}  {% capture category_name %}{{ category | first }}{% endcapture %} &lt;h3 id = {{ category_name }} &gt;&lt;i class= fas fa-tags category-tags-icon &gt;&lt;/i&gt;&lt;/i&gt; {{ category_name }}&lt;/h3&gt;&lt;a name= {{ category_name | slugize }} &gt;&lt;/a&gt;{% for post in site. categories[category_name] %}{%- assign date_format = site. minima. date_format | default:  %b %-d, %Y  -%}&lt;article class= archive-item &gt; &lt;p class= post-meta post-meta-title &gt;&lt;a class= page-meta  href= {{ site. baseurl }}{{ post. url }} &gt;{{post. title}}&lt;/a&gt; ‚Ä¢ {{ post. date | date: date_format }}&lt;/p&gt;&lt;/article&gt;{% endfor %} {% endfor %}"
    }, {
    "id": 3,
    "url": "https://stanlee321.github.io/images/copied_from_nb/",
    "title": "",
    "body": "WarningDo not manually save images into this folder. This is used by GitHub Actions to automatically copy images.  Any images you save into this folder could be deleted at build time. "
    }, {
    "id": 4,
    "url": "https://stanlee321.github.io/jupyter/spotify/python/2020/03/01/spotify.html",
    "title": "My A√±o en Spotify - Tatiii's Challengue",
    "body": "2020/03/01 -           Visualize your @Spotify data in a @github contributions-like representation with Python!https://t. co/PhlvZwTtSEPS: For non-Spanish speakers like me, the Google translated version is really decentPPS: I need to make it a #Voila demo. . . pic. twitter. com/GWylVA0vTP &mdash; Martin Renou (@martinRenou) February 14, 2020 Esto es una re-implementation del trabajo de el post de Nerudista en Tacos de datos, tambien una manera de probarlo con mis datos de Spotify y . . . ganarle los legos del mes de Marzo a @MoonLover543. @iamatachyon te rero a implementar esto xD el primero q la logre gana. Y el perdedor le paga los #legos al otro üòú &mdash; uwu sin ewe (@MoonLover543) February 27, 2020El procedimiento es el mismo explicado en el post original pero a√±ado como bonus el codigo para plotear los artistas que mas se escucha, esta al final del post.  Lo que me todo del 1 de MarzoMi a&#241;o en Spotify&#182;Voy a bajar mis datos desde mi dropbox personal y luego hacerle unzip al archivo original       !wget https://www. dropbox. com/s/bxmstnwtvr2si0j/MyData. zip  --2020-03-02 03:51:39-- https://www. dropbox. com/s/bxmstnwtvr2si0j/MyData. zipResolving www. dropbox. com (www. dropbox. com). . . 162. 125. 8. 1, 2620:100:6016:1::a27d:101Connecting to www. dropbox. com (www. dropbox. com)|162. 125. 8. 1|:443. . . connected. HTTP request sent, awaiting response. . . 301 Moved PermanentlyLocation: /s/raw/bxmstnwtvr2si0j/MyData. zip [following]--2020-03-02 03:51:39-- https://www. dropbox. com/s/raw/bxmstnwtvr2si0j/MyData. zipReusing existing connection to www. dropbox. com:443. HTTP request sent, awaiting response. . . 302 FoundLocation: https://ucc80e318b3163cc5b576223c431. dl. dropboxusercontent. com/cd/0/inline/AzJZNKBZF5rTpwyodUajjpFlFyMwlMoJ8P5iDrYnCO4zkCaMejQqSI5JPBUFgSpv_D-TYL_e_0BSaq1UZNEOa2UK2zgj6yr2ujDfO2A9JosRtSMlBTJlOl2QykU78-cycr8/file# [following]--2020-03-02 03:51:39-- https://ucc80e318b3163cc5b576223c431. dl. dropboxusercontent. com/cd/0/inline/AzJZNKBZF5rTpwyodUajjpFlFyMwlMoJ8P5iDrYnCO4zkCaMejQqSI5JPBUFgSpv_D-TYL_e_0BSaq1UZNEOa2UK2zgj6yr2ujDfO2A9JosRtSMlBTJlOl2QykU78-cycr8/fileResolving ucc80e318b3163cc5b576223c431. dl. dropboxusercontent. com (ucc80e318b3163cc5b576223c431. dl. dropboxusercontent. com). . . 162. 125. 8. 6, 2620:100:6016:6::a27d:106Connecting to ucc80e318b3163cc5b576223c431. dl. dropboxusercontent. com (ucc80e318b3163cc5b576223c431. dl. dropboxusercontent. com)|162. 125. 8. 6|:443. . . connected. HTTP request sent, awaiting response. . . 302 FOUNDLocation: /cd/0/inline2/AzKjTqD-fD7_ErG0EEi-i3WCkon52RSV1muEcQWc4yk9MyI8Fs2O9olOcwnsMXFKY4tFXJzbpsqSaQwHMbCPkuWpb0et1hm1W-BIMBG3QHgADhUZmoHXRq8sv-8biDfHFs2CMs3mlsAhLmfAIAne5DbC1p_VjN21m-A9SCdsR1MUdjGi0KYr0N0nhTIjYlK7sqJc9UHkAbSRT8sNpBY3Q-Xn9bnn8hQhwWGbl2VeJuqRSa0aqs4CxttY_Box5999newSO-NrXOLGC7bNYWaNkbrbbKkGoI1G314qFiH0q6SJztspZDg6VBPHm0FdEQ2WSVvWWgfygqoZWNDWnAX1z839nNAAcWT8oYCGW5-xQF-2mA/file [following]--2020-03-02 03:51:40-- https://ucc80e318b3163cc5b576223c431. dl. dropboxusercontent. com/cd/0/inline2/AzKjTqD-fD7_ErG0EEi-i3WCkon52RSV1muEcQWc4yk9MyI8Fs2O9olOcwnsMXFKY4tFXJzbpsqSaQwHMbCPkuWpb0et1hm1W-BIMBG3QHgADhUZmoHXRq8sv-8biDfHFs2CMs3mlsAhLmfAIAne5DbC1p_VjN21m-A9SCdsR1MUdjGi0KYr0N0nhTIjYlK7sqJc9UHkAbSRT8sNpBY3Q-Xn9bnn8hQhwWGbl2VeJuqRSa0aqs4CxttY_Box5999newSO-NrXOLGC7bNYWaNkbrbbKkGoI1G314qFiH0q6SJztspZDg6VBPHm0FdEQ2WSVvWWgfygqoZWNDWnAX1z839nNAAcWT8oYCGW5-xQF-2mA/fileReusing existing connection to ucc80e318b3163cc5b576223c431. dl. dropboxusercontent. com:443. HTTP request sent, awaiting response. . . 200 OKLength: 765358 (747K) [application/zip]Saving to: ‚ÄòMyData. zip‚ÄôMyData. zip     100%[===================&gt;] 747. 42K 3. 56MB/s  in 0. 2s  2020-03-02 03:51:40 (3. 56 MB/s) - ‚ÄòMyData. zip‚Äô saved [765358/765358]        %ls%rm -rf MyData  MyData/ MyData. zip my_spotify_data. zip sample_data/        %ls  MyData. zip my_spotify_data. zip sample_data/        # Descomprimiendo!unzip MyData. zip   Archive: MyData. zip  creating: MyData/ inflating: MyData/StreamingHistory0. json  inflating: MyData/StreamingHistory1. json  inflating: MyData/StreamingHistory2. json  inflating: MyData/StreamingHistory3. json  inflating: MyData/StreamingHistory4. json         # que hay dentro. . . !head MyData/StreamingHistory0. json  [ {  &#34;endTime&#34; : &#34;2018-12-14 16:29&#34;,  &#34;artistName&#34; : &#34;Ricardo Montaner&#34;,  &#34;trackName&#34; : &#34;Me va a extra√±ar (aka Unchain My Heart)&#34;,  &#34;msPlayed&#34; : 275757 }, {  &#34;endTime&#34; : &#34;2019-02-27 22:46&#34;,  &#34;artistName&#34; : &#34;Sebastian Yatra&#34;,        # Algunos importsimport calendarimport numpy as npimport matplotlib. pyplot as pltimport seaborn as snsfrom datetime import timedelta    Los datos&#182;: Los archivos dentro de los archivos json mencionados anteriormente se ven m√°s o menos as√≠: [ {  &quot;endTime&quot; : &quot;2019-02-04 17:14&quot;,  &quot;artistName&quot; : &quot;MGMT&quot;,  &quot;trackName&quot; : &quot;Time to Pretend&quot;,  &quot;msPlayed&quot; : 261000 }, {  &quot;endTime&quot; : &quot;2019-02-04 17:18&quot;,  &quot;artistName&quot; : &quot;MGMT&quot;,&quot;. . . &quot;En donde estos son los valores: endTime: D√≠a y hora en los que finaliz√≥ la reproducci√≥n, en formato UTC (Tiempo Universal Coordinado). artistName: Nombre del  creador  de cada elemento reproducido (por ejemplo, el nombre del artista de una canci√≥n). trackName: Nombre de los elementos reproducidos o vistos (por ejemplo, t√≠tulo de una canci√≥n o nombre de un video). msPlayed: significa cu√°ntos milisegundos se reprodujo una canci√≥n. Para leer estos datos en un DataFrame (que es como los vamos a ocupar m√°s adelante) vamos a hacer uso de esta peque√±a funci√≥n:       %ls MyData/   DuoNewFamily. json  Playlist1. json      StreamingHistory2. json FamilyPlan. json  &#39;Read Me First. pdf&#39;    StreamingHistory3. json Follow. json     SearchQueries. json    StreamingHistory4. json Inferences. json   StreamingHistory0. json  Userdata. json Payments. json    StreamingHistory1. json  YourLibrary. json  Nuestros datos estan dentro de la carpeta MyData/       from glob import globimport jsonimport pandas as pd# path donde estan el datadata_path = &quot;. /MyData/&quot;def read_history():  history = []  for file in sorted(glob(data_path + &quot;/StreamingHistory*. json&quot;)):    with open(file) as readable:      history. extend(json. load(readable))  history = pd. DataFrame(history)  history[&quot;endTime&quot;] = pd. to_datetime(history[&quot;endTime&quot;])  return historystreaming_history = read_history()streaming_history. head(5)           endTime   artistName   trackName   msPlayed         0   2018-12-14 16:29:00   Ricardo Montaner   Me va a extra√±ar (aka Unchain My Heart)   275757       1   2019-02-27 22:46:00   Sebastian Yatra   Por Perro   246618       2   2019-02-27 23:56:00   Reyli Barba   ¬øQu√© Nos Pas√≥? (with Yuridia)   199701       3   2019-02-27 23:56:00   Artificial Intelligence (AI Podcast) with Lex . . .    Tuomas Sandholm: Poker and Game Theory   5264       4   2019-02-27 23:56:00   Artificial Intelligence (AI Podcast) with Lex . . .    Juergen Schmidhuber: Godel Machines, Meta-Lear. . .    6086     Histograma&#182;: Siempre he sido fan de la forma en la que GitHub presenta las contribuciones que cada desarrollador hace en el sitio, y me parece que los datos obtenidos de Spotify, pero antes vamos a tener que modificar los datos un poco. Como no nos interesa la hora en que cada canci√≥n termin√≥, primero vamos a deshacernos de la parte temporal de endTime:       streaming_history[&quot;date&quot;] = streaming_history[&quot;endTime&quot;]. dt. floor(&#39;d&#39;)    Luego vamos a obtener un conteo de canciones por d√≠a con groupby:       by_date = streaming_history. groupby(&quot;date&quot;)[[&quot;trackName&quot;]]. count()by_date = by_date. sort_index()    Para nuestra gr√°fica, necesitamos tambi√©n saber a qu√© d√≠a de la semana y qu√© n√∫mero de semana corresponde cada fecha, esto lo obtenemos con las propiedades week y weekday:       by_date[&quot;weekday&quot;] = by_date. index. weekdayby_date[&quot;week&quot;] = by_date. index. week    Y que al final dejar√° nuestro DataFrame vi√©ndose as√≠:       by_date. head()           trackName   weekday   week       date                  2018-12-14   1   4   50       2019-02-27   4   2   9       2019-02-28   211   3   9       2019-03-01   120   4   9       2019-03-02   16   5   9     Hasta el momento ya tenemos casi todo, lo que falta es obtener n√∫meros continuos para la semana, es decir, en el frame de arriba la semana 6 de 2019 debe ser la semana 0, la semana 7 debe ser la semana 1. . . a mi no se me ocurre otra manera de hacerlo m√°s que con un ciclo for:       week = 0prev_week = by_date. iloc[0][&quot;week&quot;]continuous_week = np. zeros(len(by_date)). astype(int)sunday_dates = []for i, (_, row) in enumerate(by_date. iterrows()):  if row[&quot;week&quot;] != prev_week:    week += 1    prev_week = row[&quot;week&quot;]  continuous_week[i] = weekby_date[&quot;continuous_week&quot;] = continuous_week by_date. head()           trackName   weekday   week   continuous_week       date                     2018-12-14   1   4   50   0       2019-02-27   4   2   9   1       2019-02-28   211   3   9   1       2019-03-01   120   4   9   1       2019-03-02   16   5   9   1     El siguiente paso es preparar, con NumPy, una matriz de tama√±o d√≠as ‚úï semanas en donde cada una de las entradas ser√° la cantidad de canciones que escuchamos en ese d√≠a, de esa semana:       songs = np. full((7, continuous_week. max()+1), np. nan)for index, row in by_date. iterrows():  songs[row[&quot;weekday&quot;]][row[&quot;continuous_week&quot;]] = row[&quot;trackName&quot;]    Ahora, simplemente podr√≠amos graficar el la matriz songs, sin embargo el resultado no es tan agradable:       sns. heatmap(songs)  &lt;matplotlib. axes. _subplots. AxesSubplot at 0x7f4161942ef0&gt;  Lo que podemos hacer para mejorarlo requiere de un poco m√°s de c√≥digo. Lo primero es limpiar un poco las etiquetas de los ejes:       min_date = streaming_history[&quot;endTime&quot;]. min()first_monday = min_date - timedelta(min_date. weekday())mons = [first_monday + timedelta(weeks=wk) for wk in range(continuous_week. max())]x_labels = [calendar. month_abbr[mons[0]. month]]x_labels. extend([  calendar. month_abbr[mons[i]. month] if mons[i-1]. month != mons[i]. month else &quot;&quot;   for i in range(1, len(mons))])y_labels = [&quot;Mon&quot;, &quot;&quot;, &quot;Wed&quot;, &quot;&quot;, &quot;Fri&quot;, &quot;&quot;, &quot;Sun&quot;]    Definitivamente las etiquetas del eje de las X son mucho m√°s complicado que las de Y, ya que no son continuas ni fijas, deben ser calculadas de acuerdo a los datos (si queres un poco m√°s de explicaci√≥n sobre el c√≥digo, dime en @io_exception). Despu√©s vamos a hacer un poco de grafimagia con el tama√±o de la gr√°fica, colores y los ejes. Y ya por √∫ltimo, usaremos el heatmap de seaborn con algunos cuantos argumentos que explicar√© m√°s adelante y desde luego, no olvides que hay que poner las etiquetas que tanto nos cost√≥ conseguir:       fig = plt. figure(figsize=(20,5))ax = plt. subplot()ax. set_title(&quot;My year on Spotify&quot;, fontsize=20,pad=40)ax. xaxis. tick_top()ax. tick_params(axis=&#39;both&#39;, which=&#39;both&#39;,length=0)ax. set_facecolor(&quot;#ebedf0&quot;) fig. patch. set_facecolor(&#39;white&#39;)sns. heatmap(songs, linewidths=2, linecolor=&#39;white&#39;, square=True,      mask=np. isnan(songs), cmap=&quot;Greens&quot;,      vmin=0, vmax=50, cbar=False, ax=ax)ax. set_yticklabels(y_labels, rotation=0)ax. set_xticklabels(x_labels, ha=&quot;left&quot;)pass    Esto es escuchar m√∫sica todos los dias. Los argumentos: songs: nuestra matriz de d√≠as ‚úï semanas con la cuenta de canciones por d√≠a, linewidths: el tama√±o de la separaci√≥n entre cada recuadro, linecolor: el color de la separaci√≥n entre cada recuadro, square: le indica a la funci√≥n que queremos que se respete la relaci√≥n 1:1 en el tama√±o de cada recuadro, mask: este es un argumento bastante interesante, ya que nos va a ayudar a  enmascarar  llos recuadros para los que no tenemos informaci√≥n. Lo establecemos a una matriz de valores booleanos (de tama√±o d√≠as ‚úï semanas), en donde cada True significa que no hay informaci√≥n para dicho d√≠a/semanacmap: el colormap que se debe aplicar, curiosamente  Greens  coincide bastante con la coloraci√≥n que usa GitHub, vmin: el valor que consideramos como el m√≠nimo de entre todos nuestros valores,vmax: el valor que consideramos m√°ximo de entre todos nuestros valores, en mi caso considero que 100 canciones es el m√°ximo, ¬°a pesar de que mi r√©cord es de 190 en un d√≠a!cbar: valor booleano para indicar si queremos o no mostrar la barra de color que usualmente acompa√±a a el heatmap,ax: el axes sobre el que se debe dibujar la gr√°fica. Y voil√†, nuestra gr√°fica est√° lista. Ya quedar√° en ti modificar algunos aspectos de la gr√°fica, tal vez ponerle informaci√≥n acerca de la cantidad de canciones, habilitar la barra de color. . . otra gran idea ser√≠a hacer lo mismo pero en un framework como D3. js, pero eso ya queda para otro post. Por lo mientras, te invito a jugar con los datos en este Google Colab Notebook y a que me contactes v√≠a twitter en @io_exception. BONUS&#182;Artitas que mas escucho. &#182;: Adicionalmente tengo creada esta clase que me ayudara a plotear por frecuencia las veces que tengo escuchando a X artista. Los datos que voy a utilizar son del dataframe streaming_historyde arriba       streaming_history. head()           endTime   artistName   trackName   msPlayed   date         0   2018-12-14 16:29:00   Ricardo Montaner   Me va a extra√±ar (aka Unchain My Heart)   275757   2018-12-14       1   2019-02-27 22:46:00   Sebastian Yatra   Por Perro   246618   2019-02-27       2   2019-02-27 23:56:00   Reyli Barba   ¬øQu√© Nos Pas√≥? (with Yuridia)   199701   2019-02-27       3   2019-02-27 23:56:00   Artificial Intelligence (AI Podcast) with Lex . . .    Tuomas Sandholm: Poker and Game Theory   5264   2019-02-27       4   2019-02-27 23:56:00   Artificial Intelligence (AI Podcast) with Lex . . .    Juergen Schmidhuber: Godel Machines, Meta-Lear. . .    6086   2019-02-27           streaming_history. shape  (40908, 5)  La columna de interes va ser artistName       import seaborn as snsclass PlotCommenter:  &quot;&quot;&quot;  Plot Top N words in a given column dataframe  &quot;&quot;&quot;  def __init__(self, target_column=&quot;commenter&quot;):    self. target_column = target_column    def get_sorted_tuits(self, counts, top_n=25):    sorted_twitts = sorted(counts. items(), key= lambda kv:(kv[1], kv[0]))[::-1][:top_n]        for i, (k,v) in enumerate( sorted_twitts[1:]):      print(str(i) + &quot;-&quot;, &quot;Artista: &quot;, k, &quot;  |||&quot;, &quot;Plays: &quot;, v)    return sorted_twitts    def create_df_counts(self, sorted_twitts):        df_x = pd. DataFrame(sorted_twitts, columns=[&quot;label&quot;, &quot;count&quot;])    df_x[&quot;index&quot;] = df_x. index    df_x. index = list(df_x[&quot;label&quot;])    df_x = df_x. sort_values([&#39;count&#39;], ascending=False)    return df_x      def get_uniques_and_user_names(self, df):        #user_names = df[&quot;commenter&quot;]. apply(self. deEmojify)    user_names = df[self. target_column]    #user_names = user_names. str. replace(&quot; &quot;, &quot;&quot;)    uniques = user_names. unique()    return uniques, user_names    def plot_word_count(self, df, titley=&#39;Number of Comments&#39;, titlex=&quot;Names&quot;, title=&quot;Message frec&quot;):    plt. figure(figsize=(10,6))    ax = sns. barplot(x=&quot;index&quot;, y=&quot;count&quot;, data=df, order=df[&#39;index&#39;])    ax. set_xlabel(titlex)    ax. set_ylabel(titley)    ax. set_xticklabels(df[&#39;label&#39;], rotation=&#39;vertical&#39;, fontsize=10)         #plt. savefig(self. data_path + &quot;/&quot; + title + &quot;. png&quot;, format=&quot;png&quot;, bbox_inches = &#39;tight&#39;)      def create_sorted_counts(self, user_names, top_n=25):        # Count for N    counts = self. get_counts(user_names)    sorted_counts = self. get_sorted_tuits(counts, top_n = top_n)        return sorted_counts      def get_counts(self, user_names):        counts = {}    for u in user_names:      counts[u] = []    for u in user_names:      counts[u]. append(u)    for k,v in counts. items():      counts[k] = len(v)          return counts    def create_top_N_users(self, sorted_tuits, n=21):          # Word Frecuency for N    df_x = self. create_df_counts(sorted_tuits)        # Plot For N    topN = df_x. iloc[1:n]        return topN    def main(self, df, top_n = 21):        self. uniques, self. user_names = self. get_uniques_and_user_names(df)    self. sorted_counts = self. create_sorted_counts(self. user_names, top_n=top_n)    top20 = self. create_top_N_users(self. sorted_counts, n=top_n)              self. plot_word_count(top20,               titley=&#39;Number of Plays&#39;,               titlex=&quot;Artists&quot;,               title=&quot;Message frec&quot;)    plot_top_commenter = PlotCommenter(target_column = &quot;artistName&quot;)plot_top_commenter. main(streaming_history, top_n = 20)  0- Artista: R√≠o Roma  ||| Plays: 13101- Artista: Reik  ||| Plays: 12582- Artista: Prince Royce  ||| Plays: 10053- Artista: Sebastian Yatra  ||| Plays: 6964- Artista: Maluma  ||| Plays: 5395- Artista: Daniel Santacruz  ||| Plays: 5296- Artista: Luciano Pereyra  ||| Plays: 5047- Artista: MYA  ||| Plays: 4848- Artista: Romeo Santos  ||| Plays: 4719- Artista: Piso 21  ||| Plays: 46810- Artista: Dani J  ||| Plays: 45611- Artista: CNCO  ||| Plays: 41412- Artista: Aventura  ||| Plays: 39813- Artista: Linkin Park  ||| Plays: 39614- Artista: Marc Anthony  ||| Plays: 36915- Artista: Am√©rico  ||| Plays: 34216- Artista: Kewin Cosmos  ||| Plays: 33117- Artista: Los Angeles Azules  ||| Plays: 32818- Artista: Adolescent&#39;s Orquesta  ||| Plays: 302  Es puro Pop al final . . . TODO&#182;Time Series for each artist"
    }, {
    "id": 5,
    "url": "https://stanlee321.github.io/fastpages/jupyter/2020/02/20/test.html",
    "title": "Fastpages Notebook Blog Post",
    "body": "2020/02/20 -           About&#182;This notebook is a demonstration of some of capabilities of fastpages with notebooks. With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! Front Matter&#182;: Front Matter is a markdown cell at the beginning of your notebook that allows you to inject metadata into your notebook. For example: Setting toc: true will automatically generate a table of contentsSetting badges: true will automatically include GitHub and Google Colab links to your notebook. Setting comments: true will enable commenting on your blog post, powered by utterances. More details and options for front matter can be viewed on the front matter section of the README. Markdown Shortcuts&#182;: put a #hide flag at the top of any cell you want to completely hide in the docs put a #collapse flag at the top of any cell if you want to hide that cell by default, but stil have it be visible to the reader:              #collapseimport pandas as pdimport altair as alt       put a #collapse_show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it:              #collapse_showcars = &#39;https://vega. github. io/vega-datasets/data/cars. json&#39;movies = &#39;https://vega. github. io/vega-datasets/data/movies. json&#39;sp500 = &#39;https://vega. github. io/vega-datasets/data/sp500. csv&#39;stocks = &#39;https://vega. github. io/vega-datasets/data/stocks. csv&#39;flights = &#39;https://vega. github. io/vega-datasets/data/flights-5k. json&#39;       Interactive Charts With Altair&#182;: Charts made with Altair remain interactive.  Example charts taken from this repo, specifically this notebook. Example 1: DropDown&#182;:       # single-value selection over [Major_Genre, MPAA_Rating] pairs# use specific hard-wired values as the initial selected valuesselection = alt. selection_single(  name=&#39;Select&#39;,  fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;],  init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;},  bind={&#39;Major_Genre&#39;: alt. binding_select(options=genres), &#39;MPAA_Rating&#39;: alt. binding_radio(options=mpaa)}) # scatter plot, modify opacity based on selectionalt. Chart(movies). mark_circle(). add_selection(  selection). encode(  x=&#39;Rotten_Tomatoes_Rating:Q&#39;,  y=&#39;IMDB_Rating:Q&#39;,  tooltip=&#39;Title:N&#39;,  opacity=alt. condition(selection, alt. value(0. 75), alt. value(0. 05)))    Example 2: Tooltips&#182;:       alt. Chart(movies). mark_circle(). add_selection(  alt. selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;])). encode(  x=&#39;Rotten_Tomatoes_Rating:Q&#39;,  y=alt. Y(&#39;IMDB_Rating:Q&#39;, axis=alt. Axis(minExtent=30)), # use min extent to stabilize axis title placement  tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;]). properties(  width=600,  height=400)    Example 3: More Tooltips&#182;:       # select a point for which to provide details-on-demandlabel = alt. selection_single(  encodings=[&#39;x&#39;], # limit selection to x-axis value  on=&#39;mouseover&#39;, # select on mouseover events  nearest=True,  # select data point nearest the cursor  empty=&#39;none&#39;   # empty selection includes no data points)# define our base line chart of stock pricesbase = alt. Chart(). mark_line(). encode(  alt. X(&#39;date:T&#39;),  alt. Y(&#39;price:Q&#39;, scale=alt. Scale(type=&#39;log&#39;)),  alt. Color(&#39;symbol:N&#39;))alt. layer(  base, # base line chart    # add a rule mark to serve as a guide line  alt. Chart(). mark_rule(color=&#39;#aaa&#39;). encode(    x=&#39;date:T&#39;  ). transform_filter(label),    # add circle marks for selected time points, hide unselected points  base. mark_circle(). encode(    opacity=alt. condition(label, alt. value(1), alt. value(0))  ). add_selection(label),  # add white stroked text to provide a legible background for labels  base. mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2). encode(    text=&#39;price:Q&#39;  ). transform_filter(label),  # add text labels for stock prices  base. mark_text(align=&#39;left&#39;, dx=5, dy=-5). encode(    text=&#39;price:Q&#39;  ). transform_filter(label),    data=stocks). properties(  width=700,  height=400)    Data Tables&#182;: You can display tables per the usual way in your blog:       movies = &#39;https://vega. github. io/vega-datasets/data/movies. json&#39;df = pd. read_json(movies)# display table with pandasdf[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;,   &#39;Production_Budget&#39;, &#39;IMDB_Rating&#39;]]. head()           Title   Worldwide_Gross   Production_Budget   IMDB_Rating         0   The Land Girls   146083. 0   8000000. 0   6. 1       1   First Love, Last Rites   10876. 0   300000. 0   6. 9       2   I Married a Strange Person   203134. 0   250000. 0   6. 8       3   Let's Talk About Sex   373615. 0   300000. 0   NaN       4   Slam   1087521. 0   1000000. 0   3. 4     Images&#182;: Local Images&#182;: You can reference local images and they will be copied and rendered on your blog automatically.  You can include these with the following markdown syntax: ![](my_icons/fastai_logo. png) Remote Images&#182;: Remote images can be included with the following markdown syntax: ![](https://image. flaticon. com/icons/svg/36/36686. svg) Animated Gifs&#182;: Animated Gifs work, too! ![](https://upload. wikimedia. org/wikipedia/commons/7/71/ChessPawnSpecialMoves. gif) Captions&#182;: You can include captions with markdown images like this: ![](https://www. fast. ai/images/fastai_paper/show_batch. png  Credit: https://www. fast. ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/ ) Other Elements&#182;Tweetcards&#182;: Typing &gt; twitter: https://twitter. com/jakevdp/status/1204765621767901185?s=20 will render this:Altair 4. 0 is released! https://t. co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t. co/roXmzcsT58 . . . read on for some highlights. pic. twitter. com/vWJ0ZveKbZ &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Youtube Videos&#182;: Typing &gt; youtube: https://youtu. be/XfoYk_Z5AkI will render this: Boxes / Callouts&#182;: Typing &gt; Warning: There will be no second warning! will render this:    Warning: There will be no second warning! Typing &gt; Important: Pay attention! It's important. will render this:    Important: Pay attention! It&#8217;s important. Typing &gt; Tip: This is my tip. will render this:    Tip: This is my tip. Typing &gt; Note: Take note of this. will render this:    Note: Take note of this. Typing &gt; Note: A doc link to [an example website: fast. ai](https://www. fast. ai/) should also work fine. will render in the docs:    Note: A doc link to an example website: fast. ai should also work fine. "
    }, {
    "id": 6,
    "url": "https://stanlee321.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
    "title": "Example Markdown Post",
    "body": "2020/01/14 - Basic setup: Jekyll requires blog post files to be named according to the following format: YEAR-MONTH-DAY-filename. md Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. . md is the file extension for markdown files. The first line of the file should start with a single hash character, then a space, then your title. This is how you create a ‚Äúlevel 1 heading‚Äù in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. Basic formatting: You can use italics, bold, code font text, and create links. Here‚Äôs a footnote 1. Here‚Äôs a horizontal rule: Lists: Here‚Äôs a list:  item 1 item 2And a numbered list:  item 1 item 2Boxes and stuff:  This is a quotation    You can include alert boxes‚Ä¶and‚Ä¶    You can include info boxesImages: Code: General preformatted text: # Do a thingdo_thing()Python code and output: # Prints '2'print(1+1)2Tables:       Column 1   Column 2         A thing   Another thing   Tweetcards: Altair 4. 0 is released! https://t. co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t. co/roXmzcsT58 . . . read on for some highlights. pic. twitter. com/vWJ0ZveKbZ &mdash; Jake VanderPlas (@jakevdp) December 11, 2019Footnotes:       This is the footnote. ¬†&#8617;    "
    }];

var idx = lunr(function () {
    this.ref('id')
    this.field('title')
    this.field('body')
    this.metadataWhitelist = ['position']

    documents.forEach(function (doc) {
        this.add(doc)
    }, this)
});
function lunr_search(term) {
    document.getElementById('lunrsearchresults').innerHTML = '<ul></ul>';
    if(term) {
        document.getElementById('lunrsearchresults').innerHTML = "<p>Search results for '" + term + "'</p>" + document.getElementById('lunrsearchresults').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>No results found...</li>";
        }
    }
    return false;
}